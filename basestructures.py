import csv
import sys
from graphs import Node

#
# This class is meant to read input data, and process it into various structures that make it easier
# to construct a tree graph for the various columns (i.e. messages such as H!, H" etc).
# From these graphs it should then be possible to create JSON or XML schemas.
#

class BaseStructures():
    def checkuniqueness(self, filename):
        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')
            h = {}
            for row in crdr:
                if len(row[59].strip()) > 0:
                    if row[0] in h:
                        h[row[0]] = h[row[0]] + 1
                    else:
                        h[row[0]] = 1
                        
            for key in h:
                if h[key] != 1:
                    print(key + ' ' + str(key))
                    
    # Read CSV file called filename. column = type of document, i.e. H1, H2, H3 etc.
    def readit(self, filename, column):
        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')
            i = 0
            for row in crdr:
                if len(row[column].strip()) > 0:
                    print(';'.join(row[0:3]) + ';' + row[column] + ';' + ';'.join(row[62:69]))
                    i = i+1
            print(str(i) + ' rows.')

    # Returns a dict where key is a unique key (generated by me) and the info for the Data Element as value (in a list).
    # Reads CSV file called filename.
    # Returns a dict with following structure:
    # Key   = ID (just an integer assigned by me)
    # Value = [DataElement-number, EUCDM 5.2-id, Data Element name, datatype, elementtype]
    def constructDict(self, filename):
        dedict = {}

        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')
            i = 100         # DataElement-ID is given an arbitrary starting point, but one which leaves room at the bottom.

            for row in crdr:
                if row[0].lstrip().startswith('#'):
                    continue
                else:
                    denum = [int(x) for x in row[0].split()]

                    if (denum[0] < 0):
                        elementtype = 'Level'
                    elif len(row[3].strip()) == 0:
                        elementtype = 'Container'
                    else:
                        elementtype = 'Datafield'
                    dedict[i] = [row[0], row[1], row[2], row[3], elementtype]
                    i = i + 1
                    
        return dedict


    # Returns a dict.
    # Key = 4 first digits in DENo.
    # Value = a graph with all underlying nodes for this DENo.
    # NB: Only DEs where the last 6 digits equal zero are keys.
    # Input is a CSV file.
    def constructDict2(self, filename):
        dedict = {}

        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')

            for row in crdr:
                if row[0].lstrip().startswith('#'):
                    continue
                else:
                    denum = [int(x) for x in row[0].split()]
                    prefix1 = denum[0]*100 + denum[1]
                    prefix2 = denum[0]*100000 + denum[1]*1000 + denum[2]

                    if denum[0] <= 0:
                        continue
                    elif denum[2] == 0 and denum[3] == 0:
                        node = Node()
                        node.setData(prefix1)
                        dedict[prefix1] = node
                    elif denum[2] > 0 and denum[3] == 0:
                       if prefix1 not in dedict:
                           print("Missing this in dict: ", row[0])
                       else:
                           node = Node()
                           node.setData(prefix2)
                           dedict[prefix1].addChild(node)
                    elif denum[2] > 0 and denum[3] > 0:
                       if prefix1 not in dedict:
                           print("Missing this in dict: ", row[0])
                       else:
                           node = Node()
                           node.setData(row[0])

                           kids = dedict[prefix1].getChildren()
                           for kid in kids:
                               if kid.getData() == prefix2:
                                   kid.addChild(node)
                    
        return dedict

    # Construct a list with all Data Elements.
    # Input is table made in constructTable().
    # This will split the denum into its constituent integers, and append the key from constructTable.
    # Used for searching for denumbers..
    # Returns a list with following structure:
    # Each row contains this: [DENo_1, DENo_2, DENo_3, DENo_4, key]
    def constructList(self, dedict):
        delist = []

        for k in dedict:
            # First split the full DE number into its parts, 4 integers.
            denum = [int(x) for x in dedict[k][0].split()]
            denum.append(k)
            delist.append(denum)

        return delist

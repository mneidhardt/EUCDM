import csv
import sys

#
# This class is meant to read input data, and process it into various structures that make it easier
# to construct a tree graph for the various columns (i.e. messages such as H1, H2 etc).
# From these graphs it should then be possible to create JSON or XML schemas.
#

class BaseStructures():

    # Return list of individual numers in DE number.
    # Expects a string as input, e.g. 12 01 000 000.
    # Returns a list of integers, e.g. [12, 1, 0, 0].
    def getDENumberSplitup(self, denumber):
        return [int(x) for x in denumber.split()]
    
    # Return the first 2 'digit groups' of the DENumber composed as 1 integer.
    # Expects a string as input, e.g. 12 01 000 000.
    # Returns an integer, e.g. 1201.
    def getPrefix1(self, denumber):
        denum = self.getDENumberSplitup(denumber)
        return denum[0]*100 + denum[1]
        
    # Return the first 3 'digit groups' of the DENumber composed as 1 integer.
    # Expects a string as input, e.g. 12 01 001 000.
    # Returns an integer, e.g. 1201001.
    def getPrefix2(self, denumber):
        denum = self.getDENumberSplitup(denumber)
        return denum[0]*100000 + denum[1]*1000 + denum[2]
        
    # Return all 'digit groups' of the DENumber composed as 1 integer.
    # Expects a string as input, e.g. 12 01 001 003.
    # Returns an integer, e.g. 1201001003.
    def getPrefix3(self, denumber):
        denum = self.getDENumberSplitup(denumber)
        return denum[0]*100000000 + denum[1]*1000000 + denum[2]*1000 + denum[3]
        
    def checkuniqueness(self, filename):
        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')
            h = {}
            for row in crdr:
                if len(row[59].strip()) > 0:
                    if row[0] in h:
                        h[row[0]] = h[row[0]] + 1
                    else:
                        h[row[0]] = 1
                        
            for key in h:
                if h[key] != 1:
                    print(key + ' ' + str(key))
                    
    # Read CSV file called filename. column = type of document, i.e. H1, H2, H3 etc.
    def readit(self, filename, column):
        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')
            i = 0
            for row in crdr:
                if len(row[column].strip()) > 0:
                    print(';'.join(row[0:3]) + ';' + row[column] + ';' + ';'.join(row[62:69]))
                    i = i+1
            print(str(i) + ' rows.')

    # Reads CSV file with relations for toplevel DataElements.
    # Format is:
    # parent, child, cardinality, h1,h2,h3,h4,h5,h6,h7,i1,i2
    # The last columns has 'a', 'b', 'c' or '-', meaning mandatory, optional, optional for ms or N/A.
    def getRelations(self, filename):
        relations = []
        
        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')
            i = 0
            for row in crdr:
                if row[0].lstrip().startswith('#'):
                    continue
                else:
                    for i in range(0,3):
                        row[i] = int(row[i])
                    for i in range(3, 12):
                        row[i] = row[i].strip()
                    relations.append(row)
        return relations
    
    # Returns a dict where key is a unique key (generated by me) and the info for the Data Element as value (in a list).
    # Reads CSV file called filename. This file must be sorted by DENumber.
    # Returns a dict with following structure:
    # Key   = ID (just an integer assigned by me)
    # Value = [DataElement-number, EUCDM 5.2-id, Data Element name, datatype, elementtype]
    def constructDict(self, filename):
        dedict = {}

        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')
            i = 100         # DataElement-ID is given an arbitrary starting point, but one which leaves room at the bottom.

            for row in crdr:
                if row[0].lstrip().startswith('#'):
                    continue
                else:
                    denum = self.getDENumberSplitup(row[0])

                    if (denum[0] < 0):
                        elementtype = 'Level'
                    elif len(row[3].strip()) == 0:
                        elementtype = 'Container'
                    else:
                        elementtype = 'Datafield'
                    dedict[i] = [row[0], row[1], row[2], row[3], elementtype]
                    i = i + 1
                    
        return dedict


    # Returns a dict with the following content.
    # Key = 4 first digits in DENo as an integer.
    # Value = a graph with all underlying nodes for this DENo.
    # Based on the belief that a DE with number 12 01 000 000 is parent of all DEs
    # with number 12 01 xyz æøå, where at least one of [x,y,z,æ,ø,å] is > 0. 
    # NB: Only DEs where the last 6 digits equal zero are keys.
    # Input is a CSV file.
    def constructDict2(self, filename, Nodeclass):
        dedict = {}

    # setData() in this mthod needs to use same keys as in Graphs,
    # which is the key from dict made in constructDict().
    # But to do that, I need to be able to look it up using DENumber...
    # How?
        with open(filename) as csvfile:
            crdr = csv.reader(csvfile, delimiter=';')

            for row in crdr:
                if row[0].lstrip().startswith('#'):
                    continue
                else:
                    denum = self.getDENumberSplitup(row[0])
                    
                    prefix1 = self.getPrefix1(row[0])
                    prefix2 = self.getPrefix2(row[0])
                    prefix3 = self.getPrefix3(row[0])

                    if denum[0] <= 0:
                        continue
                    elif denum[2] == 0 and denum[3] == 0:
                        node = Nodeclass(prefix1, row[0])
                        dedict[prefix1] = node
                    elif denum[2] > 0 and denum[3] == 0:
                       if prefix1 not in dedict:
                           print("Missing this in dict: ", row[0])  # This means that we are missing parent for current DE.
                       else:
                           node = Nodeclass(prefix2, row[0])
                           dedict[prefix1].addChild(node)
                    elif denum[2] > 0 and denum[3] > 0:
                       if prefix1 not in dedict:
                           print("Missing this in dict: ", row[0])
                       else:
                           node = Nodeclass(prefix3, row[0])

                            # Now look for parent:
                           for kid in dedict[prefix1].getChildren():
                               if kid.getKey() == prefix2:
                                   kid.addChild(node)
                    
        return dedict

    # Construct a dict with key = denum and value = the corresponding key from DETable.
    # Resulting list is used for inverse lookup, i.e. looking up the key using denumber.
    def constructList(self, dedict):
        delist = {}

        for k in dedict:
            delist[dedict[k][0]] = k

        return delist
